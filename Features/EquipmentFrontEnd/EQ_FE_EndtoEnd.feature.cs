// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EquipmentStoresTests.Features.EquipmentFrontEnd
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EQ-FE-EndtoEnd")]
    public partial class EQ_FE_EndtoEndFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/EquipmentFrontEnd", "EQ-FE-EndtoEnd", ("  As a customer\r\n  I want to browse, select, and purchase equipment\r\n  So that I " +
                "can receive the items I need"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "EQ_FE_EndtoEnd.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout as a Guest - Single Item")]
        [NUnit.Framework.CategoryAttribute("store")]
        [NUnit.Framework.TestCaseAttribute("SMARTBAR™ 2.2 lbs WEIGHT PLATE (SINGLE)", "Customer01", "credit card", null)]
        public async System.Threading.Tasks.Task CheckoutAsAGuest_SingleItem(string singleItemName, string customerName, string paymentOptions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "store"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("singleItemName", singleItemName);
            argumentsOfScenario.Add("customerName", customerName);
            argumentsOfScenario.Add("paymentOptions", paymentOptions);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Checkout as a Guest - Single Item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await testRunner.GivenAsync("I am located on home page of equipment store", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.WhenAsync("I navigate to Equipment Page via Shop all", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
    await testRunner.AndAsync(string.Format("I add {0} to cart on Equipment page", singleItemName), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
    await testRunner.ThenAsync(string.Format("I should see equipment {0} be added into Cart Dialogs", singleItemName), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 12
    await testRunner.AndAsync("I should see the correct price and Subtotal in Cart Dialogs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
    await testRunner.WhenAsync("I click CHECKOUT button on Cart Dialogs", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
    await testRunner.AndAsync(string.Format("I enter guest customer {0} info on Shipping Page", customerName), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
    await testRunner.ThenAsync("I should see the Order Total include the calculated Tax on Shipping Page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
    await testRunner.AndAsync("I should see free shipping is displayed on Shipping Page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.WhenAsync("I click Continue to payment on Shipping Page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
    await testRunner.AndAsync(string.Format("I enter {0} payment info of {1} on Payment Page", paymentOptions, customerName), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
    await testRunner.ThenAsync(("I should see order success message Congratulations on your order! on Order Succes" +
                        "s page"), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 20
    await testRunner.AndAsync("I should see the order number is presented on Order Success page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
    await testRunner.AndAsync("I should see the Create your account here link on Order Success page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
    await testRunner.AndAsync(string.Format("I should see the email address of {0} is displayed on OrderSuccess page", customerName), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
    await testRunner.AndAsync(string.Format(("I should see the order confirm email has been send to customer {0} with correct i" +
                            "nfo"), customerName), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
